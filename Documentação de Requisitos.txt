                                                                           Documenta√ß√£o de Requisitos


* Atribui√ß√µes
- Pedro Jos√©: Documenta√ß√£o 
- AlexSandro Sousa, Gabriel Moreira: C√≥digo 
- Caio Franco e Kaique Marlon: Teste

* Requisitos Funcionais
1 - Sistema deve ser capaz de ler determinada quantidade de notas 
2 - Sistema deve ser capaz de calcular a m√©dia ponderada das notas juntos com os pesos autom√°ticos
3 - Sistema deve calcular a maior nota
4 - Sistema deve criar um avaliador de classifica√ß√£o baseado na nota de corte
5 - Sistema deve ser capaz de criar um ranking

* Requisitos N√£o Funcionais
1 - f√°cil usabilidade

* C√≥digos Funcionais em rela√ß√£o aos Requisitos

        let participantes = [];  

        // Fun√ß√£o lambda para encontrar a maior nota
        const notaMaxima = (notas) => Math.max(...notas);  // Fun√ß√£o Lambda

        // List comprehension para transformar as notas em n√∫meros
        const stringToNotas = (notasStr) => notasStr.split(",").map(n => parseFloat(n.trim()));  // List Comprehension

        // Closure para retornar a avalia√ß√£o baseada na m√©dia
        const gerarAvaliador = (notaCorte) => (media) => media >= notaCorte ? "Classificado para a pr√≥xima fase" : "Eliminado";  // Closure

        // Fun√ß√£o de alta ordem
        const aplicarAvaliacao = (func, media) => func(media);  // Fun√ß√£o de Alta Ordem
        
        # Fun√ß√£o relacionada ao requisito funcional 2 
        function calcularMediaPonderada(notas) {
            let pesos = Array.from({ length: notas.length }, (_, i) => i + 1);
            let totalPonderado = notas.reduce((soma, nota, i) => soma + nota * pesos[i], 0);
            let pesoTotal = pesos.reduce((a, b) => a + b, 0);
            return totalPonderado / pesoTotal;
        }
         
        # Fun√ß√£o relacionada ao requisito funcional 3
        function calcularNotas() {
            const nome = document.getElementById("nome").value;
            const notasStr = document.getElementById("notas").value;
            const notaCorte = parseFloat(document.getElementById("notaCorte").value);

            if (!nome || !notasStr || isNaN(notaCorte)) {
                alert("Por favor, preencha todos os campos corretamente.");
                return;
            }

            if (participantes.some(p => p.nome === nome)) {
                alert("Erro: Nome j√° cadastrado!");
                return;
            }

            // Usando List Comprehension para converter notas de string para n√∫meros
            const notas = stringToNotas(notasStr);
            const media = calcularMediaPonderada(notas);
            const maiorNota = notaMaxima(notas);
            
            # Fun√ß√£o relacionada ao requisito funcional 4
            // Gerando avaliador usando Closure
            const avaliador = gerarAvaliador(notaCorte);
            const resultado = aplicarAvaliacao(avaliador, media);

            participantes.push({ nome, media, maiorNota });

            document.getElementById("resultado").innerHTML =
                `M√©dia: ${media.toFixed(2)}<br>
                Maior Nota: ${maiorNota}<br>
                Resultado: <strong>${resultado}</strong>`;
        }

        function novoParticipante() {
            document.getElementById("nome").value = "";
            document.getElementById("notas").value = "";
            document.getElementById("notaCorte").value = "";
            document.getElementById("resultado").innerHTML = "";
        }
         
        # Fun√ß√£o relacionada ao requisito funcional 5
        function mostrarRanking() {
            if (participantes.length === 0) {
                alert("Nenhum participante registrado.");
                return;
            }

            participantes.sort((a, b) => b.media - a.media);

            let rankingHTML = "<h3>üèÜ Ranking de Participantes üèÜ</h3><ol>";
            participantes.forEach(p => {
                rankingHTML += `<li>${p.nome} - M√©dia: ${p.media.toFixed(2)} (Maior Nota: ${p.maiorNota})</li>`;
            });
            rankingHTML += "</ol>";

            document.getElementById("ranking").innerHTML = rankingHTML;
        }

        function voltarInicio() {
            document.getElementById("ranking").style.display = "none";
            document.querySelector("div").style.display = "block"; 
        }
